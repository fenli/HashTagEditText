project.group = PUBLISH_GROUP_ID
project.version = PUBLISH_VERSION + (project.hasProperty("snapshot") ? '-SNAPSHOT' : '')

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For android libraries
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        // For pure kotlin libraries, in case you have them
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version

                // Artifacts
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }
                artifact androidSourcesJar

                pom {
                    name = rootProject.name
                    description = "EditText for multiple tags input."
                    url = 'https://github.com/fenli/HashTagEditText'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'fenli'
                            name = 'Steven Lewi'
                            email = 'steven@stevenlewi.id'
                        }
                    }
                    scm {
                        connection = GIT_URL
                        developerConnection = GIT_URL
                        url = SITE_URL
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"]
    )
    sign publishing.publications
}
